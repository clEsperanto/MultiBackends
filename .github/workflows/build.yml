
name: Build

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

jobs:

    build: 

        runs-on: ${{ matrix.os }}
        name: build-${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                cuda_version: [12.1.1]

        steps:

            - name: Checkout
              uses: actions/checkout@v3

            - name: Install dependencies (ubuntu)
              if: matrix.os == 'ubuntu-latest'
              run: |
                # sudo apt-get update   
                # sudo apt-get install -y nvidia-cuda-toolkit 

                wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin
                sudo mv cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600
                wget https://developer.download.nvidia.com/compute/cuda/12.1.1/local_installers/cuda-repo-ubuntu2204-12-1-local_12.1.1-530.30.02-1_amd64.deb
                sudo dpkg -i cuda-repo-ubuntu2204-12-1-local_12.1.1-530.30.02-1_amd64.deb
                sudo cp /var/cuda-repo-ubuntu2204-12-1-local/cuda-*-keyring.gpg /usr/share/keyrings/
                sudo apt-get update
                sudo apt-get -y install cuda

                sudo ldconfig /usr/local/cuda/lib64

            - name: Install dependencies (windows)
              if: matrix.os == 'windows-latest'
              uses: Jimver/cuda-toolkit@v0.2.10
              id: cuda-toolkit
              with:
                cuda: '12.1.0'
              # run: |
              #   # Invoke-WebRequest -Uri "https://developer.download.nvidia.com/compute/cuda/12.1.1/local_installers/cuda_12.1.1_531.14_windows.exe" -OutFile "cuda_installer.exe"
              
              #   # # Wait for the installation process to complete before proceeding
              #   # Start-Process -Wait -FilePath ".\cuda_installer.exe" -ArgumentList "--silent", "--toolkit", "--override", "--installpath=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.0"
              #   choco install cuda -y
              
              #   # Add CUDA binaries to the system path
              #   $cudaBinPath = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.0\bin"
              #   $cudaLibPath = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.0\libnvvp"
              #   $env:Path = $cudaBinPath + ";" + $cudaLibPath + ";" + $env:Path
              
              #   # Set environment variables for CUDA
              #   $env:CUDA_PATH = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.0"
              #   $env:CUDAToolkit_ROOT = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.0"
              #   $env:CUDA_PATH_V12_1_1 = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.0"
              
              #   # Refresh the environment variables to make them available for subsequent steps
              #   RefreshEnv
              
      
            - name: Setup cmake
              uses: lukka/get-cmake@v3.26.3

            - name: Configure and build project
              run: |
                cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_CUDA_ARCHITECTURES=61
                cmake --build build --config Release -j 4 

                  
            
